package test

import (
	"AdminPro/common/utils"
	"bytes"
	"encoding/hex"
	"fmt"
	"net"
	"strings"
	"testing"
	"time"
)

// 定义每次发送的数据和对应的日志信息
type DataEntry struct {
	Data      []byte
	Message   string
	SleepTime int
	Action    string
}

// 通用的发送和接收函数
func sendAndReceive(conn net.Conn, entries []DataEntry) {
	//go func() {
	for _, entry := range entries {
		// 打印信息
		fmt.Println(entry.Message)

		// 发送数据
		_, err := conn.Write(entry.Data)
		if err != nil {
			fmt.Println("发送数据时出错:", err.Error())
			return
		}

		if entry.Action == "enter" || entry.Action == "sit" || entry.Action == "add" {
			fmt.Println()
		}

		// 接收响应
		var buffer = make([]byte, 1024*1024)
		for {
			conn.SetDeadline(time.Now().Add(time.Duration(100) * time.Second))
			n, err := conn.Read(buffer)
			if err != nil {
				fmt.Println("接收数据时出错:", err.Error())
				return
			}
			if n > 0 {
				break
			}
		}
		time.Sleep(time.Duration(entry.SleepTime) * time.Second)
	}
	//}()
	time.Sleep(time.Duration(30) * time.Second)
}

// 通用的发送和接收函数
func sendAndReceive2(conn net.Conn, entries []DataEntry) {
	for _, entry := range entries {
		// 打印信息
		fmt.Println(entry.Message)

		// 发送数据
		_, err := conn.Write(entry.Data)
		if err != nil {
			fmt.Println("发送数据时出错:", err.Error())
			return
		}

		// 接收响应
		var buffer = make([]byte, 1024*1024)
		for {
			n, err := conn.Read(buffer)
			if err != nil {
				fmt.Println("接收数据时出错:", err.Error())
				return
			}
			if n > 0 {
				break
			}
		}
	}
}

func parseStringToHex(str string) []byte {
	if strings.TrimSpace(str) == "" {
		return nil
	}
	bytes1 := strings.Split(str, " ")
	hexBytes := make([]byte, 0, len(bytes1))
	for _, byt := range bytes1 {
		hexs, _ := hex.DecodeString(byt)
		hexBytes = append(hexBytes, hexs[0])
	}
	return hexBytes
}

func TestSendAction(t *testing.T) {
	conn, err := net.Dial("tcp", "127.0.0.1:8051")
	//conn, err := net.Dial("tcp", "16.162.29.171:8051")
	defer func() {
		time.Sleep(time.Duration(5) * time.Second)
		_ = conn.Close()
	}()

	if err != nil {
		fmt.Println(err)
	}

	enter1 := parseStringToHex("44 5A 50 4B 01 00 0F 46 BF 01 02 FE 00 0E 03 EA 00 0C 00 76 00 30 00 64 00 62 00 31 00 64 00 63 00 34 00 35 00 63 00 39 00 34 00 35 00 34 00 66 00 61 00 34 00 62 00 38 00 39 00 64 00 63 00 30 00 62 00 32 00 35 00 38 00 64 00 64 00 66 00 64 00 33 00 30 00 00 00 00 00 00 06 3C 01 3D 01 3E 01 83 00 04 00 00 00 3D 84 00 04 00 09 47 9D 85 00 04 00 00 00 00")
	seatDown1 := parseStringToHex("44 5A 50 4B 01 00 0F 46 BF 01 02 FE 00 0E 03 EA 00 12 00 AC 00 30 00 64 00 62 00 31 00 64 00 63 00 34 00 35 00 63 00 39 00 34 00 35 00 34 00 66 00 61 00 34 00 62 00 38 00 39 00 64 00 63 00 30 00 62 00 32 00 35 00 38 00 64 00 64 00 66 00 64 00 33 00 30 00 00 00 00 00 00 07 3C 01 3D 01 3E 00 1A 00 32 00 33 00 2E 00 31 00 30 00 32 00 30 00 38 00 35 00 36 00 38 00 35 00 36 3F 00 1C 00 31 00 31 00 33 00 2E 00 33 00 38 00 34 00 35 00 32 00 38 00 31 00 36 00 30 00 31 40 00 00 82 00 04 00 00 00 3D 83 00 04 00 09 47 9D")
	AddChips1 := parseStringToHex("44 5A 50 4B 01 00 0F 46 BF 01 02 FE 00 0E 03 EA 00 1C 01 42 00 30 00 64 00 62 00 31 00 64 00 63 00 34 00 35 00 63 00 39 00 34 00 35 00 34 00 66 00 61 00 34 00 62 00 38 00 39 00 64 00 63 00 30 00 62 00 32 00 35 00 38 00 64 00 64 00 66 00 64 00 33 00 30 00 00 00 00 00 00 0F 3C 01 3D 01 3E 00 1A 00 32 00 33 00 2E 00 31 00 30 00 32 00 30 00 38 00 35 00 36 00 38 00 35 00 36 3F 00 1C 00 31 00 31 00 33 00 2E 00 33 00 38 00 34 00 35 00 32 00 38 00 31 00 36 00 30 00 31 40 00 00 82 00 04 00 00 4E 20 83 00 04 00 00 00 3D 84 00 04 00 09 47 9D 85 00 04 00 00 00 00 86 00 04 00 00 00 00 87 00 04 00 00 00 00 88 00 48 00 41 00 36 00 35 00 43 00 45 00 30 00 44 00 41 00 2D 00 43 00 39 00 39 00 32 00 2D 00 35 00 42 00 46 00 31 00 2D 00 39 00 35 00 45 00 33 00 2D 00 42 00 32 00 34 00 39 00 42 00 30 00 35 00 31 00 35 00 46 00 32 00 45 89 00 18 00 46 00 30 00 31 00 38 00 39 00 38 00 46 00 33 00 38 00 32 00 38 00 34 8A 00 04 00 00 00 00 8B 00 0A 00 43 00 68 00 69 00 6E 00 61")

	enter2 := parseStringToHex("44 5A 50 4B 01 00 0F 46 BE 01 01 FE 00 0E 03 EA 00 0C 00 76 00 36 00 34 00 66 00 63 00 64 00 36 00 34 00 37 00 39 00 38 00 31 00 30 00 34 00 39 00 33 00 63 00 61 00 61 00 66 00 34 00 35 00 63 00 35 00 61 00 35 00 38 00 64 00 37 00 39 00 34 00 66 00 66 00 00 00 00 00 00 06 3C 01 3D 01 3E 01 83 00 04 00 00 00 3D 84 00 04 00 09 47 9D 85 00 04 00 00 00 00")
	seatDown2 := parseStringToHex("44 5A 50 4B 01 00 0F 46 BE 01 01 FE 00 0E 03 EA 00 12 00 B0 00 36 00 34 00 66 00 63 00 64 00 36 00 34 00 37 00 39 00 38 00 31 00 30 00 34 00 39 00 33 00 63 00 61 00 61 00 66 00 34 00 35 00 63 00 35 00 61 00 35 00 38 00 64 00 37 00 39 00 34 00 66 00 66 00 00 00 00 00 00 07 3C 01 3D 00 3E 00 10 00 31 00 31 00 33 00 2E 00 33 00 36 00 37 00 37 3F 00 10 00 32 00 33 00 2E 00 31 00 32 00 38 00 36 00 37 40 00 1A 00 31 00 35 00 34 00 2E 00 38 00 39 00 2E 00 31 00 34 00 2E 00 32 00 34 00 32 82 00 04 00 00 00 3D 83 00 04 00 09 47 9D")
	AddChips2 := parseStringToHex("44 5A 50 4B 01 00 0F 46 BE 01 01 FE 00 0E 03 EA 00 1C 01 1C 00 36 00 34 00 66 00 63 00 64 00 36 00 34 00 37 00 39 00 38 00 31 00 30 00 34 00 39 00 33 00 63 00 61 00 61 00 66 00 34 00 35 00 63 00 35 00 61 00 35 00 38 00 64 00 37 00 39 00 34 00 66 00 66 00 00 00 00 00 00 0F 3C 00 3D 01 3E 00 10 00 31 00 31 00 33 00 2E 00 33 00 36 00 37 00 37 3F 00 10 00 32 00 33 00 2E 00 31 00 32 00 38 00 36 00 37 40 00 1A 00 31 00 35 00 34 00 2E 00 38 00 39 00 2E 00 31 00 34 00 2E 00 32 00 34 00 32 82 00 04 00 00 4E 20 83 00 04 00 00 00 3D 84 00 04 00 09 47 9D 85 00 04 00 00 00 00 86 00 04 00 00 00 00 87 00 04 00 00 00 00 88 00 40 00 38 00 38 00 62 00 64 00 35 00 38 00 31 00 36 00 64 00 31 00 30 00 64 00 35 00 63 00 32 00 35 00 64 00 39 00 65 00 62 00 64 00 61 00 39 00 64 00 66 00 34 00 31 00 32 00 34 00 33 00 66 00 63 89 00 00 8A 00 04 00 00 00 00 8B 00 00")

	StartRoom1 := parseStringToHex("44 5A 50 4B 01 00 0F 46 BF 01 02 FE 00 0E 03 EA 00 20 00 69 00 30 00 64 00 62 00 31 00 64 00 63 00 34 00 35 00 63 00 39 00 34 00 35 00 34 00 66 00 61 00 34 00 62 00 38 00 39 00 64 00 63 00 30 00 62 00 32 00 35 00 38 00 64 00 64 00 66 00 64 00 33 00 30 00 00 00 00 00 00 02 82 00 04 00 00 00 3D 83 00 04 00 09 47 9D")
	SendAction1 := parseStringToHex("44 5A 50 4B 01 00 0F 46 BF 01 02 FE 00 0E 03 EA 00 13 00 79 00 30 00 64 00 62 00 31 00 64 00 63 00 34 00 35 00 63 00 39 00 34 00 35 00 34 00 66 00 61 00 34 00 62 00 38 00 39 00 64 00 63 00 30 00 62 00 32 00 35 00 38 00 64 00 64 00 66 00 64 00 33 00 30 00 00 00 00 00 00 05 3C 03 83 00 04 00 00 00 3D 84 00 04 00 09 47 9D 85 00 04 00 00 01 F4 86 00 04 00 00 00 00")
	//SendAction2 := parseStringToHex("44 5A 50 4B 01 00 0F 46 7D 01 01 FE 00 0E 03 EA 00 13 00 79 00 34 00 30 00 31 00 33 00 63 00 33 00 35 00 61 00 66 00 64 00 65 00 37 00 34 00 34 00 37 00 65 00 39 00 66 00 33 00 66 00 65 00 36 00 39 00 61 00 37 00 61 00 32 00 64 00 31 00 30 00 38 00 31 00 00 00 00 00 00 05 3C 04 83 00 04 00 00 00 3F 84 00 04 00 0C AB 2D 85 00 04 00 00 4D 58 86 00 04 00 00 00 01")

	sendAndReceive(conn, []DataEntry{
		{
			Data:      enter1,
			Message:   "第一个人进入房间",
			SleepTime: 1,
			Action:    "enter",
		},
		{
			Data:      seatDown1,
			Message:   "第一个人坐下",
			SleepTime: 1,
			Action:    "sit",
		},
		{
			Data:      AddChips1,
			Message:   "第一个人添加筹码",
			SleepTime: 3,
			Action:    "add",
		},
		{
			Data:      enter2,
			Message:   "第二个人进房",
			SleepTime: 3,
			Action:    "enter",
		},
		{
			Data:      seatDown2,
			Message:   "第二个人坐下",
			SleepTime: 3,
			Action:    "sit",
		},
		{
			Data:      AddChips2,
			Message:   "第二个人添加筹码",
			Action:    "add",
			SleepTime: 2,
		},
		{
			Data:      StartRoom1,
			Message:   "发送开始房间请求",
			Action:    "start",
			SleepTime: 3,
		},
		{
			Data:      SendAction1,
			Message:   "第一个人下注",
			SleepTime: 1,
		},
		//{
		//	Data:      SendAction2,
		//	Message:   "第二个人下注",
		//	SleepTime: 1,
		//},
	})
}

func TestRemoteAdd(t *testing.T) {
	//conn, err := net.Dial("tcp", "16.162.29.171:8051")
	conn, err := net.Dial("tcp", "16.162.29.171:8051")
	//conn, err := net.Dial("tcp", "dz-fat-room.abc9by6pt.com:8051")
	if err != nil {
		fmt.Println(err)
	}
	sendAndReceive(conn, []DataEntry{
		{
			Data:      parseStringToHex("44 5A 50 4B 01 00 0F 46 A5 01 02 FE 00 0E 03 EA 00 0C 00 76 00 35 00 66 00 30 00 64 00 62 00 38 00 61 00 36 00 63 00 39 00 33 00 37 00 34 00 66 00 39 00 38 00 38 00 61 00 30 00 62 00 30 00 37 00 65 00 66 00 34 00 66 00 31 00 32 00 35 00 39 00 35 00 36 00 00 00 00 00 00 06 3C 01 3D 01 3E 01 83 00 04 00 00 00 3D 84 00 04 00 02 58 D4 85 00 04 00 00 00 00"),
			Message:   "enterroom",
			SleepTime: 1,
			Action:    "enter",
		},
	})
}

func TestCarryRangeChange(t *testing.T) {
	conn, err := net.Dial("tcp", "127.0.0.1:8040")
	if err != nil {
		fmt.Println(err)
	}

	data := []byte{
		0x44, 0x5A, 0x50, 0x4B, 0x01, 0x00, 0x0F, 0x45,
		0xEE, 0x01, 0x02, 0xFE, 0x00, 0x0E, 0x03, 0xEA,
		0x00, 0x0C, 0x00, 0x76, 0x00, 0x32, 0x00, 0x66,
		0x00, 0x66, 0x00, 0x31, 0x00, 0x65, 0x00, 0x35,
		0x00, 0x31, 0x00, 0x34, 0x00, 0x30, 0x00, 0x66,
		0x00, 0x37, 0x00, 0x61, 0x00, 0x34, 0x00, 0x30,
		0x00, 0x36, 0x00, 0x66, 0x00, 0x61, 0x00, 0x35,
		0x00, 0x37, 0x00, 0x39, 0x00, 0x36, 0x00, 0x63,
		0x00, 0x30, 0x00, 0x37, 0x00, 0x61, 0x00, 0x35,
		0x00, 0x65, 0x00, 0x61, 0x00, 0x32, 0x00, 0x61,
		0x00, 0x37, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x06, 0x3C, 0x01, 0x3D, 0x01, 0x3E,
		0x01, 0x83, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3D,
		0x84, 0x00, 0x04, 0x00, 0x0E, 0x00, 0x05, 0x85,
		0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
	}

	i, err := conn.Write(data)
	if err != nil {
		fmt.Println(err.Error())
	}
	fmt.Println("i", i)
	fmt.Println(conn.RemoteAddr().String())
	for {
		var message_new = make([]byte, 1024*1024)
		n, _ := conn.Read(message_new)
		if n == 0 {
			continue
		}

		fmt.Printf("发送自动托管请求\n")
		data2 := []byte{
			0x44, 0x5A, 0x50, 0x4B, 0x01, 0x00, 0x0F, 0x45,
			0xEE, 0x01, 0x02, 0xFE, 0x00, 0x0E, 0x03, 0xEA,
			0x00, 0x44, 0x00, 0x6D, 0x00, 0x32, 0x00, 0x66,
			0x00, 0x66, 0x00, 0x31, 0x00, 0x65, 0x00, 0x35,
			0x00, 0x31, 0x00, 0x34, 0x00, 0x30, 0x00, 0x66,
			0x00, 0x37, 0x00, 0x61, 0x00, 0x34, 0x00, 0x30,
			0x00, 0x36, 0x00, 0x66, 0x00, 0x61, 0x00, 0x35,
			0x00, 0x37, 0x00, 0x39, 0x00, 0x36, 0x00, 0x63,
			0x00, 0x30, 0x00, 0x37, 0x00, 0x61, 0x00, 0x35,
			0x00, 0x65, 0x00, 0x61, 0x00, 0x32, 0x00, 0x61,
			0x00, 0x37, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x04, 0x82, 0x00, 0x04, 0x00, 0x0E,
			0x00, 0x05, 0x83, 0x00, 0x04, 0x00, 0x00, 0x00,
			0x3D, 0x84, 0x02, 0x85, 0x00,
		}
		conn.Write(data2)
		for {
			n, _ = conn.Read(message_new)
			if n == 0 {
				continue
			}
			break
		}

		fmt.Printf("带入范围修改请求\n")
		data3 := []byte{
			0x44, 0x5A, 0x50, 0x4B, 0x01, 0x00, 0x0F, 0x45,
			0xEE, 0x01, 0x02, 0xFE, 0x00, 0x0E, 0x03, 0xEA,
			0x00, 0x28, 0x00, 0x77, 0x00, 0x32, 0x00, 0x66,
			0x00, 0x66, 0x00, 0x31, 0x00, 0x65, 0x00, 0x35,
			0x00, 0x31, 0x00, 0x34, 0x00, 0x30, 0x00, 0x66,
			0x00, 0x37, 0x00, 0x61, 0x00, 0x34, 0x00, 0x30,
			0x00, 0x36, 0x00, 0x66, 0x00, 0x61, 0x00, 0x35,
			0x00, 0x37, 0x00, 0x39, 0x00, 0x36, 0x00, 0x63,
			0x00, 0x30, 0x00, 0x37, 0x00, 0x61, 0x00, 0x35,
			0x00, 0x65, 0x00, 0x61, 0x00, 0x32, 0x00, 0x61,
			0x00, 0x37, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x04, 0x82, 0x00, 0x04, 0x00, 0x0E,
			0x00, 0x05, 0x83, 0x00, 0x04, 0x00, 0x00, 0x00,
			0x3D, 0x84, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01,
			0x85, 0x00, 0x04, 0x00, 0x00, 0x00, 0x05,
		}
		conn.Write(data3)
		for {
			n, _ = conn.Read(message_new)
			if n == 0 {
				continue
			}
			break
		}

		break
	}
}

func TestCheckPermissionT(t *testing.T) {
	conn, err := net.Dial("tcp", "127.0.0.1:8040")
	if err != nil {
		fmt.Println(err)
	}
	data := []byte{
		0x44, 0x5A, 0x50, 0x4B, 0x01, 0x00, 0x0F, 0x45,
		0xD3, 0x01, 0x02, 0xFE, 0x00, 0x0E, 0x03, 0xEA,
		0x00, 0x0C, 0x00, 0x76, 0x00, 0x63, 0x00, 0x61,
		0x00, 0x36, 0x00, 0x66, 0x00, 0x64, 0x00, 0x61,
		0x00, 0x63, 0x00, 0x31, 0x00, 0x35, 0x00, 0x61,
		0x00, 0x62, 0x00, 0x30, 0x00, 0x34, 0x00, 0x65,
		0x00, 0x38, 0x00, 0x32, 0x00, 0x38, 0x00, 0x39,
		0x00, 0x64, 0x00, 0x38, 0x00, 0x36, 0x00, 0x30,
		0x00, 0x30, 0x00, 0x35, 0x00, 0x34, 0x00, 0x65,
		0x00, 0x66, 0x00, 0x62, 0x00, 0x66, 0x00, 0x38,
		0x00, 0x63, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x06, 0x3C, 0x01, 0x3D, 0x01, 0x3E,
		0x01, 0x83, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3D,
		0x84, 0x00, 0x04, 0x00, 0x07, 0x08, 0x4A, 0x85,
		0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
	}

	i, err := conn.Write(data)
	if err != nil {
		fmt.Println(err.Error())
	}
	fmt.Println("i", i)
	fmt.Println(conn.RemoteAddr().String())
	for {
		var message_new = make([]byte, 1024*1024)
		n, _ := conn.Read(message_new)
		if n == 0 {
			continue
		}

		fmt.Printf("发送自动托管请求\n")
		data2 := []byte{
			0x44, 0x5A, 0x50, 0x4B, 0x01, 0x00, 0x0F, 0x45,
			0xD3, 0x01, 0x02, 0xFE, 0x00, 0x0E, 0x03, 0xEA,
			0x00, 0x44, 0x00, 0x6D, 0x00, 0x63, 0x00, 0x61,
			0x00, 0x36, 0x00, 0x66, 0x00, 0x64, 0x00, 0x61,
			0x00, 0x63, 0x00, 0x31, 0x00, 0x35, 0x00, 0x61,
			0x00, 0x62, 0x00, 0x30, 0x00, 0x34, 0x00, 0x65,
			0x00, 0x38, 0x00, 0x32, 0x00, 0x38, 0x00, 0x39,
			0x00, 0x64, 0x00, 0x38, 0x00, 0x36, 0x00, 0x30,
			0x00, 0x30, 0x00, 0x35, 0x00, 0x34, 0x00, 0x65,
			0x00, 0x66, 0x00, 0x62, 0x00, 0x66, 0x00, 0x38,
			0x00, 0x63, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x04, 0x82, 0x00, 0x04, 0x00, 0x07,
			0x08, 0x4A, 0x83, 0x00, 0x04, 0x00, 0x00, 0x00,
			0x3D, 0x84, 0x02, 0x85, 0x00,
		}
		conn.Write(data2)
		for {
			n, _ = conn.Read(message_new)
			if n == 0 {
				continue
			}
			break
		}

		fmt.Printf("坐下请求\n")
		data3 := []byte{
			0x44, 0x5A, 0x50, 0x4B, 0x01, 0x00, 0x0F, 0x45,
			0xD3, 0x01, 0x02, 0xFE, 0x00, 0x0E, 0x03, 0xEA,
			0x00, 0x12, 0x00, 0xAC, 0x00, 0x63, 0x00, 0x61,
			0x00, 0x36, 0x00, 0x66, 0x00, 0x64, 0x00, 0x61,
			0x00, 0x63, 0x00, 0x31, 0x00, 0x35, 0x00, 0x61,
			0x00, 0x62, 0x00, 0x30, 0x00, 0x34, 0x00, 0x65,
			0x00, 0x38, 0x00, 0x32, 0x00, 0x38, 0x00, 0x39,
			0x00, 0x64, 0x00, 0x38, 0x00, 0x36, 0x00, 0x30,
			0x00, 0x30, 0x00, 0x35, 0x00, 0x34, 0x00, 0x65,
			0x00, 0x66, 0x00, 0x62, 0x00, 0x66, 0x00, 0x38,
			0x00, 0x63, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x07, 0x3C, 0x01, 0x3D, 0x01, 0x3E,
			0x00, 0x1A, 0x00, 0x32, 0x00, 0x33, 0x00, 0x2E,
			0x00, 0x31, 0x00, 0x30, 0x00, 0x32, 0x00, 0x30,
			0x00, 0x38, 0x00, 0x35, 0x00, 0x36, 0x00, 0x38,
			0x00, 0x35, 0x00, 0x36, 0x3F, 0x00, 0x1C, 0x00,
			0x31, 0x00, 0x31, 0x00, 0x33, 0x00, 0x2E, 0x00,
			0x33, 0x00, 0x38, 0x00, 0x34, 0x00, 0x35, 0x00,
			0x32, 0x00, 0x38, 0x00, 0x31, 0x00, 0x36, 0x00,
			0x30, 0x00, 0x31, 0x40, 0x00, 0x00, 0x82, 0x00,
			0x04, 0x00, 0x00, 0x00, 0x3D, 0x83, 0x00, 0x04,
			0x00, 0x07, 0x08, 0x4A,
		}
		conn.Write(data3)
		for {
			n, _ = conn.Read(message_new)
			if n == 0 {
				continue
			}
			break
		}

		fmt.Printf("发送CheckPermission请求\n")
		data4 := []byte{
			0x44, 0x5A, 0x50, 0x4B, 0x01, 0x00, 0x0F, 0x45,
			0xD3, 0x01, 0x02, 0xFE, 0x00, 0x0E, 0x03, 0xEA,
			0x00, 0x48, 0x00, 0x70, 0x00, 0x63, 0x00, 0x61,
			0x00, 0x36, 0x00, 0x66, 0x00, 0x64, 0x00, 0x61,
			0x00, 0x63, 0x00, 0x31, 0x00, 0x35, 0x00, 0x61,
			0x00, 0x62, 0x00, 0x30, 0x00, 0x34, 0x00, 0x65,
			0x00, 0x38, 0x00, 0x32, 0x00, 0x38, 0x00, 0x39,
			0x00, 0x64, 0x00, 0x38, 0x00, 0x36, 0x00, 0x30,
			0x00, 0x30, 0x00, 0x35, 0x00, 0x34, 0x00, 0x65,
			0x00, 0x66, 0x00, 0x62, 0x00, 0x66, 0x00, 0x38,
			0x00, 0x63, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x03, 0x82, 0x00, 0x04, 0x00, 0x07,
			0x08, 0x4A, 0x83, 0x00, 0x04, 0x00, 0x00, 0x00,
			0x3D, 0x84, 0x00, 0x04, 0x00, 0x0F, 0x45, 0xD3,
		}
		conn.Write(data4)
		for {
			n, _ = conn.Read(message_new)
			if n == 0 {
				continue
			}
			fmt.Println(string(message_new))
			break
		}
		break
	}
}

func TestEnterRoomAndAddChips(t *testing.T) {
	// conn, err := net.Dial("tcp", "16.162.29.171:8040")
	conn, err := net.Dial("tcp", "127.0.0.1:8040")
	if err != nil {
		fmt.Println(err)
	}

	data := []byte{
		0x44, 0x5A, 0x50, 0x4B, 0x01, 0x00, 0x0F, 0x45,
		0xA8, 0x01, 0x02, 0xFE, 0x00, 0x0E, 0x03, 0xEA,
		0x00, 0x0C, 0x00, 0x76, 0x00, 0x66, 0x00, 0x37,
		0x00, 0x61, 0x00, 0x34, 0x00, 0x63, 0x00, 0x65,
		0x00, 0x36, 0x00, 0x32, 0x00, 0x38, 0x00, 0x61,
		0x00, 0x64, 0x00, 0x62, 0x00, 0x34, 0x00, 0x36,
		0x00, 0x35, 0x00, 0x61, 0x00, 0x61, 0x00, 0x64,
		0x00, 0x34, 0x00, 0x31, 0x00, 0x37, 0x00, 0x35,
		0x00, 0x66, 0x00, 0x33, 0x00, 0x32, 0x00, 0x32,
		0x00, 0x33, 0x00, 0x39, 0x00, 0x66, 0x00, 0x38,
		0x00, 0x62, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x06, 0x3C, 0x01, 0x3D, 0x01, 0x3E,
		0x01, 0x83, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3D,
		0x84, 0x00, 0x04, 0x00, 0x02, 0x6A, 0xB4, 0x85,
		0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
	}

	_, err = conn.Write(data)
	if err != nil {
		fmt.Println(err.Error())
	}
	fmt.Println(conn.RemoteAddr().String())
	for {
		var message_new = make([]byte, 1024*1024)
		n, _ := conn.Read(message_new)
		if n == 0 {
			continue
		}

		fmt.Printf("发送AddChips请求\n")
		data2 := []byte{}
		conn.Write(data2)

		for {
			n, _ = conn.Read(message_new)
			if n == 0 {
				continue
			}
			break
		}

		break
	}
}

func TestAutoOp(t *testing.T) {
	// conn, err := net.Dial("tcp", "16.162.29.171:8040")
	conn, err := net.Dial("tcp", "127.0.0.1:8040")
	if err != nil {
		fmt.Println(err)
	}

	data := []byte{
		0x44, 0x5A, 0x50, 0x4B, 0x01, 0x00, 0x0F, 0x45, 0x9E, 0x01, 0x02, 0xFE, 0x00, 0x0E, 0x03, 0xEA,
		0x00, 0x44, 0x00, 0x6D, 0x00, 0x32, 0x00, 0x30, 0x00, 0x63, 0x00, 0x64, 0x00, 0x35, 0x00, 0x34,
		0x00, 0x34, 0x00, 0x37, 0x00, 0x63, 0x00, 0x65, 0x00, 0x62, 0x00, 0x61, 0x00, 0x34, 0x00, 0x31,
		0x00, 0x34, 0x00, 0x30, 0x00, 0x61, 0x00, 0x38, 0x00, 0x63, 0x00, 0x36, 0x00, 0x61, 0x00, 0x36,
		0x00, 0x38, 0x00, 0x61, 0x00, 0x30, 0x00, 0x35, 0x00, 0x64, 0x00, 0x37, 0x00, 0x31, 0x00, 0x33,
		0x00, 0x34, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x82, 0x00, 0x04, 0x00, 0x0C,
		0xB5, 0x57, 0x83, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3D, 0x84, 0x02, 0x85, 0x00,
	}
	i, err := conn.Write(data)
	if err != nil {
		fmt.Println(err.Error())
	}
	fmt.Println("i", i)
	fmt.Println(conn.RemoteAddr().String())
	for {
		var message_new = make([]byte, 1024*1024)
		n, _ := conn.Read(message_new)
		if n == 0 {
			continue
		}

		break
	}
}

func TestEnterRoom2(t *testing.T) {
	// conn, err := net.Dial("tcp", "16.162.29.171:8040")
	conn, err := net.Dial("tcp", "127.0.0.1:8040")
	if err != nil {
		fmt.Println(err)
	}
	sendAndReceive(conn, []DataEntry{
		{
			Data:    parseStringToHex("44 5A 50 4B 01 00 0F 46 37 01 02 FE 00 0E 03 EA 00 0C 00 76 00 36 00 62 00 64 00 62 00 66 00 34 00 63 00 63 00 65 00 32 00 31 00 64 00 34 00 64 00 37 00 37 00 38 00 35 00 30 00 63 00 36 00 34 00 65 00 65 00 37 00 36 00 36 00 36 00 65 00 62 00 64 00 61 00 00 00 00 00 00 06 3C 01 3D 01 3E 01 83 00 04 00 00 00 3F 84 00 04 00 08 80 8E 85 00 04 00 00 00 00"),
			Message: "进入房间",
		},
	})
}

func TestEnterRoomAndSeat2(t *testing.T) {
	// conn, err := net.Dial("tcp", "16.162.29.171:8040")
	conn, err := net.Dial("tcp", "127.0.0.1:8040")
	if err != nil {
		fmt.Println(err)
	}
	sendAndReceive(conn, []DataEntry{
		{
			Data: []byte{
				0x44, 0x5A, 0x50, 0x4B, 0x01, 0x00, 0x0F, 0x46, 0x10, 0x01, 0x02, 0xFE, 0x00, 0x0E, 0x03, 0xEA,
				0x00, 0x0C, 0x00, 0x76, 0x00, 0x65, 0x00, 0x63, 0x00, 0x38, 0x00, 0x36, 0x00, 0x34, 0x00, 0x64,
				0x00, 0x39, 0x00, 0x65, 0x00, 0x38, 0x00, 0x33, 0x00, 0x36, 0x00, 0x66, 0x00, 0x34, 0x00, 0x65,
				0x00, 0x34, 0x00, 0x31, 0x00, 0x62, 0x00, 0x36, 0x00, 0x64, 0x00, 0x65, 0x00, 0x65, 0x00, 0x61,
				0x00, 0x37, 0x00, 0x32, 0x00, 0x30, 0x00, 0x62, 0x00, 0x36, 0x00, 0x61, 0x00, 0x38, 0x00, 0x39,
				0x00, 0x38, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x3C, 0x01, 0x3D, 0x01, 0x3E,
				0x01, 0x83, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3D, 0x84, 0x00, 0x04, 0x00, 0x0E, 0x61, 0x18, 0x85,
				0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
			},
			Message: "进入房间",
		},
		{
			Data: []byte{
				0x44, 0x5A, 0x50, 0x4B, 0x01, 0x00, 0x0F, 0x46, 0x10, 0x01, 0x02, 0xFE, 0x00, 0x0E, 0x03, 0xEA,
				0x00, 0x12, 0x00, 0xC6, 0x00, 0x65, 0x00, 0x63, 0x00, 0x38, 0x00, 0x36, 0x00, 0x34, 0x00, 0x64,
				0x00, 0x39, 0x00, 0x65, 0x00, 0x38, 0x00, 0x33, 0x00, 0x36, 0x00, 0x66, 0x00, 0x34, 0x00, 0x65,
				0x00, 0x34, 0x00, 0x31, 0x00, 0x62, 0x00, 0x36, 0x00, 0x64, 0x00, 0x65, 0x00, 0x65, 0x00, 0x61,
				0x00, 0x37, 0x00, 0x32, 0x00, 0x30, 0x00, 0x62, 0x00, 0x36, 0x00, 0x61, 0x00, 0x38, 0x00, 0x39,
				0x00, 0x38, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3C, 0x03, 0x3D, 0xFF, 0x3E,
				0x00, 0x1A, 0x00, 0x32, 0x00, 0x33, 0x00, 0x2E, 0x00, 0x31, 0x00, 0x30, 0x00, 0x32, 0x00, 0x30,
				0x00, 0x38, 0x00, 0x35, 0x00, 0x36, 0x00, 0x38, 0x00, 0x35, 0x00, 0x36, 0x3F, 0x00, 0x1C, 0x00,
				0x31, 0x00, 0x31, 0x00, 0x33, 0x00, 0x2E, 0x00, 0x33, 0x00, 0x38, 0x00, 0x34, 0x00, 0x35, 0x00,
				0x32, 0x00, 0x38, 0x00, 0x31, 0x00, 0x36, 0x00, 0x30, 0x00, 0x31, 0x40, 0x00, 0x1A, 0x00, 0x31,
				0x00, 0x35, 0x00, 0x34, 0x00, 0x2E, 0x00, 0x38, 0x00, 0x39, 0x00, 0x2E, 0x00, 0x31, 0x00, 0x34,
				0x00, 0x2E, 0x00, 0x32, 0x00, 0x34, 0x00, 0x32, 0x82, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3D, 0x83,
				0x00, 0x04, 0x00, 0x0E, 0x61, 0x18,
			},
			Message: "坐下",
		},
	})
}

func TestEnterRoomAndSeatAndLeave(t *testing.T) {
	conn, err := net.Dial("tcp", "16.162.29.171:8040")
	// conn, err := net.Dial("tcp", "127.0.0.1:8040")
	if err != nil {
		fmt.Println(err)
	}

	bytes1 := []byte{
		0x44, 0x5A, 0x50, 0x4B, 0x01, 0x00, 0x0F, 0x45, 0xCA, 0x01, 0x02, 0xFE, 0x00, 0x0E, 0x03, 0xEA,
		0x00, 0x0C, 0x00, 0x76, 0x00, 0x37, 0x00, 0x31, 0x00, 0x34, 0x00, 0x36, 0x00, 0x65, 0x00, 0x61,
		0x00, 0x34, 0x00, 0x39, 0x00, 0x63, 0x00, 0x38, 0x00, 0x33, 0x00, 0x36, 0x00, 0x34, 0x00, 0x61,
		0x00, 0x32, 0x00, 0x39, 0x00, 0x62, 0x00, 0x33, 0x00, 0x39, 0x00, 0x61, 0x00, 0x36, 0x00, 0x37,
		0x00, 0x39, 0x00, 0x39, 0x00, 0x31, 0x00, 0x31, 0x00, 0x34, 0x00, 0x66, 0x00, 0x64, 0x00, 0x31,
		0x00, 0x62, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x3C, 0x01, 0x3D, 0x01, 0x3E,
		0x01, 0x83, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3D, 0x84, 0x00, 0x04, 0x00, 0x0E, 0x00, 0xE6, 0x85,
		0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
	}

	i, err := conn.Write(bytes1)
	if err != nil {
		fmt.Println(err.Error())
	}
	fmt.Println("i", i)
	fmt.Println(conn.RemoteAddr().String())
	for {
		var message_new = make([]byte, 1024*1024)
		n, _ := conn.Read(message_new)
		if n == 0 {
			continue
		}

		fmt.Printf("发送seat请求")

		bytes2 := []byte{
			0x44, 0x5A, 0x50, 0x4B, 0x01, 0x00, 0x0F, 0x45, 0xCA, 0x01, 0x02, 0xFE, 0x00, 0x0E, 0x03, 0xEA,
			0x00, 0x12, 0x00, 0xAC, 0x00, 0x37, 0x00, 0x31, 0x00, 0x34, 0x00, 0x36, 0x00, 0x65, 0x00, 0x61,
			0x00, 0x34, 0x00, 0x39, 0x00, 0x63, 0x00, 0x38, 0x00, 0x33, 0x00, 0x36, 0x00, 0x34, 0x00, 0x61,
			0x00, 0x32, 0x00, 0x39, 0x00, 0x62, 0x00, 0x33, 0x00, 0x39, 0x00, 0x61, 0x00, 0x36, 0x00, 0x37,
			0x00, 0x39, 0x00, 0x39, 0x00, 0x31, 0x00, 0x31, 0x00, 0x34, 0x00, 0x66, 0x00, 0x64, 0x00, 0x31,
			0x00, 0x62, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3C, 0x01, 0x3D, 0x04, 0x3E,
			0x00, 0x1A, 0x00, 0x32, 0x00, 0x33, 0x00, 0x2E, 0x00, 0x31, 0x00, 0x30, 0x00, 0x32, 0x00, 0x30,
			0x00, 0x38, 0x00, 0x35, 0x00, 0x36, 0x00, 0x38, 0x00, 0x35, 0x00, 0x36, 0x3F, 0x00, 0x1C, 0x00,
			0x31, 0x00, 0x31, 0x00, 0x33, 0x00, 0x2E, 0x00, 0x33, 0x00, 0x38, 0x00, 0x34, 0x00, 0x35, 0x00,
			0x32, 0x00, 0x38, 0x00, 0x31, 0x00, 0x36, 0x00, 0x30, 0x00, 0x31, 0x40, 0x00, 0x00, 0x82, 0x00,
			0x04, 0x00, 0x00, 0x00, 0x3D, 0x83, 0x00, 0x04, 0x00, 0x0E, 0x00, 0xE6,
		}
		conn.Write(bytes2)

		// var message_new = make([]byte, 1024*1024)
		for {
			n, _ = conn.Read(message_new)
			if n == 0 {
				continue
			}
			fmt.Println("发送离开房间的数据")
			bytes3 := []byte{
				0x44, 0x5A, 0x50, 0x4B, 0x01, 0x00, 0x0F, 0x45, 0xCA, 0x01, 0x02, 0xFE, 0x00, 0x0E, 0x03, 0xEA,
				0x00, 0x12, 0x00, 0xAC, 0x00, 0x37, 0x00, 0x31, 0x00, 0x34, 0x00, 0x36, 0x00, 0x65, 0x00, 0x61,
				0x00, 0x34, 0x00, 0x39, 0x00, 0x63, 0x00, 0x38, 0x00, 0x33, 0x00, 0x36, 0x00, 0x34, 0x00, 0x61,
				0x00, 0x32, 0x00, 0x39, 0x00, 0x62, 0x00, 0x33, 0x00, 0x39, 0x00, 0x61, 0x00, 0x36, 0x00, 0x37,
				0x00, 0x39, 0x00, 0x39, 0x00, 0x31, 0x00, 0x31, 0x00, 0x34, 0x00, 0x66, 0x00, 0x64, 0x00, 0x31,
				0x00, 0x62, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3C, 0x03, 0x3D, 0x04, 0x3E,
				0x00, 0x1A, 0x00, 0x32, 0x00, 0x33, 0x00, 0x2E, 0x00, 0x31, 0x00, 0x30, 0x00, 0x32, 0x00, 0x30,
				0x00, 0x38, 0x00, 0x35, 0x00, 0x36, 0x00, 0x38, 0x00, 0x35, 0x00, 0x36, 0x3F, 0x00, 0x1C, 0x00,
				0x31, 0x00, 0x31, 0x00, 0x33, 0x00, 0x2E, 0x00, 0x33, 0x00, 0x38, 0x00, 0x34, 0x00, 0x35, 0x00,
				0x32, 0x00, 0x38, 0x00, 0x31, 0x00, 0x36, 0x00, 0x30, 0x00, 0x31, 0x40, 0x00, 0x00, 0x82, 0x00,
				0x04, 0x00, 0x00, 0x00, 0x3D, 0x83, 0x00, 0x04, 0x00, 0x0E, 0x00, 0xE6,
			}
			conn.Write(bytes3)
			for {
				n, _ = conn.Read(message_new)
				if n == 0 {
					continue
				}
				break
			}
			break
		}
		break
	}
}

func TestTcp(t *testing.T) {

	// conn, err := net.Dial("tcp", "16.162.29.171:8040")
	conn, err := net.Dial("tcp", "127.0.0.1:8040")
	if err != nil {
		fmt.Println(err)
	}

	// data := []byte{
	// 	0x44, 0x5A, 0x50, 0x4B, 0x01, 0x00, 0x0F, 0x45, 0x6A, 0x01, 0x02, 0xFE, 0x00, 0x0E, 0x03, 0xEA,
	// 	0x00, 0x0C, 0x00, 0x76, 0x00, 0x38, 0x00, 0x64, 0x00, 0x64, 0x00, 0x33, 0x00, 0x33, 0x00, 0x65,
	// 	0x00, 0x66, 0x00, 0x65, 0x00, 0x34, 0x00, 0x64, 0x00, 0x35, 0x00, 0x30, 0x00, 0x34, 0x00, 0x65,
	// 	0x00, 0x62, 0x00, 0x65, 0x00, 0x38, 0x00, 0x31, 0x00, 0x61, 0x00, 0x62, 0x00, 0x37, 0x00, 0x33,
	// 	0x00, 0x30, 0x00, 0x36, 0x00, 0x34, 0x00, 0x39, 0x00, 0x37, 0x00, 0x38, 0x00, 0x64, 0x00, 0x39,
	// 	0x00, 0x35, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x3C, 0x01, 0x3D, 0x01, 0x3E,
	// 	0x01, 0x83, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3D, 0x84, 0x00, 0x04, 0x00, 0x08, 0xCF, 0x79, 0x85,
	// 	0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
	// }

	// data := []byte{
	// 	0x44, 0x5A, 0x50, 0x4B, 0x01, 0x00, 0x0F, 0x43, 0xFE, 0x01, 0x02, 0xFE, 0x00, 0x0E, 0x03, 0xEA,
	// 	0x00, 0x0C, 0x00, 0x76, 0x00, 0x35, 0x00, 0x39, 0x00, 0x61, 0x00, 0x33, 0x00, 0x34, 0x00, 0x39,
	// 	0x00, 0x34, 0x00, 0x35, 0x00, 0x37, 0x00, 0x32, 0x00, 0x62, 0x00, 0x66, 0x00, 0x34, 0x00, 0x32,
	// 	0x00, 0x34, 0x00, 0x66, 0x00, 0x62, 0x00, 0x38, 0x00, 0x30, 0x00, 0x39, 0x00, 0x64, 0x00, 0x31,
	// 	0x00, 0x63, 0x00, 0x34, 0x00, 0x32, 0x00, 0x65, 0x00, 0x30, 0x00, 0x37, 0x00, 0x63, 0x00, 0x38,
	// 	0x00, 0x36, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x3C, 0x01, 0x3D, 0x01, 0x3E,
	// 	0x01, 0x83, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3D, 0x84, 0x00, 0x04, 0x00, 0x0E, 0xF1, 0x5B, 0x85,
	// 	0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
	// }

	// data := []byte{
	// 	0x44, 0x5A, 0x50, 0x4B, 0x01, 0x00, 0x0F, 0x45, 0xC0, 0x01, 0x02, 0xFE, 0x00, 0x0E, 0x03, 0xEA,
	// 	0x00, 0x0C, 0x00, 0x76, 0x00, 0x62, 0x00, 0x31, 0x00, 0x65, 0x00, 0x34, 0x00, 0x32, 0x00, 0x63,
	// 	0x00, 0x35, 0x00, 0x37, 0x00, 0x38, 0x00, 0x33, 0x00, 0x38, 0x00, 0x61, 0x00, 0x34, 0x00, 0x64,
	// 	0x00, 0x63, 0x00, 0x66, 0x00, 0x39, 0x00, 0x66, 0x00, 0x38, 0x00, 0x33, 0x00, 0x39, 0x00, 0x64,
	// 	0x00, 0x30, 0x00, 0x62, 0x00, 0x31, 0x00, 0x39, 0x00, 0x38, 0x00, 0x30, 0x00, 0x36, 0x00, 0x30,
	// 	0x00, 0x35, 0x00, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x3C, 0x01, 0x3D, 0x01, 0x3E,
	// 	0x01, 0x83, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3D, 0x84, 0x00, 0x04, 0x00, 0x09, 0x80, 0x28, 0x85,
	// 	0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
	// }

	// data := []byte{
	// 	0x44, 0x5A, 0x50, 0x4B, 0x01, 0x00, 0x0F, 0x45, 0xC0, 0x01, 0x02, 0xFE, 0x00, 0x0E, 0x03, 0xEA,
	// 	0x00, 0x0C, 0x00, 0x76, 0x00, 0x62, 0x00, 0x31, 0x00, 0x65, 0x00, 0x34, 0x00, 0x32, 0x00, 0x63,
	// 	0x00, 0x35, 0x00, 0x37, 0x00, 0x38, 0x00, 0x33, 0x00, 0x38, 0x00, 0x61, 0x00, 0x34, 0x00, 0x64,
	// 	0x00, 0x63, 0x00, 0x66, 0x00, 0x39, 0x00, 0x66, 0x00, 0x38, 0x00, 0x33, 0x00, 0x39, 0x00, 0x64,
	// 	0x00, 0x30, 0x00, 0x62, 0x00, 0x31, 0x00, 0x39, 0x00, 0x38, 0x00, 0x30, 0x00, 0x36, 0x00, 0x30,
	// 	0x00, 0x35, 0x00, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x3C, 0x01, 0x3D, 0x01, 0x3E,
	// 	0x01, 0x83, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3D, 0x84, 0x00, 0x04, 0x00, 0x07, 0xE1, 0x14, 0x85,
	// 	0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
	// }

	// data := []byte{
	// 	0x44, 0x5A, 0x50, 0x4B, 0x01, 0x00, 0x0F, 0x45, 0xC0, 0x01, 0x02, 0xFE, 0x00, 0x0E, 0x03, 0xEA,
	// 	0x00, 0x0C, 0x00, 0x76, 0x00, 0x62, 0x00, 0x31, 0x00, 0x65, 0x00, 0x34, 0x00, 0x32, 0x00, 0x63,
	// 	0x00, 0x35, 0x00, 0x37, 0x00, 0x38, 0x00, 0x33, 0x00, 0x38, 0x00, 0x61, 0x00, 0x34, 0x00, 0x64,
	// 	0x00, 0x63, 0x00, 0x66, 0x00, 0x39, 0x00, 0x66, 0x00, 0x38, 0x00, 0x33, 0x00, 0x39, 0x00, 0x64,
	// 	0x00, 0x30, 0x00, 0x62, 0x00, 0x31, 0x00, 0x39, 0x00, 0x38, 0x00, 0x30, 0x00, 0x36, 0x00, 0x30,
	// 	0x00, 0x35, 0x00, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x3C, 0x01, 0x3D, 0x01, 0x3E,
	// 	0x01, 0x83, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3D, 0x84, 0x00, 0x04, 0x00, 0x09, 0x00, 0x80, 0x85,
	// 	0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
	// }

	// data := []byte{
	// 	0x44, 0x5A, 0x50, 0x4B, 0x01, 0x00, 0x0F, 0x45, 0xC0, 0x01, 0x02, 0xFE, 0x00, 0x0E, 0x03, 0xEA,
	// 	0x00, 0x0C, 0x00, 0x76, 0x00, 0x34, 0x00, 0x63, 0x00, 0x39, 0x00, 0x38, 0x00, 0x33, 0x00, 0x64,
	// 	0x00, 0x32, 0x00, 0x39, 0x00, 0x64, 0x00, 0x63, 0x00, 0x31, 0x00, 0x33, 0x00, 0x34, 0x00, 0x39,
	// 	0x00, 0x33, 0x00, 0x38, 0x00, 0x62, 0x00, 0x30, 0x00, 0x31, 0x00, 0x64, 0x00, 0x62, 0x00, 0x30,
	// 	0x00, 0x39, 0x00, 0x30, 0x00, 0x62, 0x00, 0x61, 0x00, 0x36, 0x00, 0x37, 0x00, 0x38, 0x00, 0x61,
	// 	0x00, 0x30, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x3C, 0x01, 0x3D, 0x01, 0x3E,
	// 	0x01, 0x83, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3D, 0x84, 0x00, 0x04, 0x00, 0x08, 0x30, 0x88, 0x85,
	// 	0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
	// }

	data := []byte{
		0x44, 0x5A, 0x50, 0x4B, 0x01, 0x00, 0x0F, 0x45, 0xB3, 0x01, 0x02, 0xFE, 0x00, 0x0E, 0x03, 0xEA,
		0x00, 0x0C, 0x00, 0x76, 0x00, 0x39, 0x00, 0x37, 0x00, 0x65, 0x00, 0x34, 0x00, 0x31, 0x00, 0x33,
		0x00, 0x34, 0x00, 0x38, 0x00, 0x32, 0x00, 0x64, 0x00, 0x36, 0x00, 0x65, 0x00, 0x34, 0x00, 0x30,
		0x00, 0x39, 0x00, 0x64, 0x00, 0x39, 0x00, 0x63, 0x00, 0x63, 0x00, 0x30, 0x00, 0x62, 0x00, 0x66,
		0x00, 0x64, 0x00, 0x65, 0x00, 0x66, 0x00, 0x35, 0x00, 0x31, 0x00, 0x64, 0x00, 0x65, 0x00, 0x62,
		0x00, 0x30, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x3C, 0x01, 0x3D, 0x01, 0x3E,
		0x01, 0x83, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3D, 0x84, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x85,
		0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
	}

	i, err := conn.Write(data)
	if err != nil {
		fmt.Println(err.Error())
	}
	fmt.Println("i", i)
	fmt.Println(conn.RemoteAddr().String())
	for {

		// if n == 0 {
		// 	continue
		// }

		objs := [][]int{
			{60, utils.TYPE_INT_1},
			{61, utils.TYPE_INT_1},
			{62, utils.TYPE_INT_1},
			{65, utils.TYPE_INT_1},
			{66, utils.TYPE_INT_1},
			{67, utils.TYPE_INT_1},
			{68, utils.TYPE_INT_1},
			{69, utils.TYPE_INT_1}, // 每个玩家实际可操作最大时间（秒）
			{70, utils.TYPE_INT_1},
			{71, utils.TYPE_INT_1}, // 最大允许超时检查次数
			{72, utils.TYPE_INT_1}, // 当前操作的人超时检查次数
			{131, utils.TYPE_INT_1_ARRAY},
			{132, utils.TYPE_INT_4_ARRAY},
			{133, utils.TYPE_INT_4_ARRAY}, // 玩家状态
			{134, utils.TYPE_INT_4_ARRAY},
			{135, utils.TYPE_STRING_UTF16}, // 昵称
			{136, utils.TYPE_INT_4_ARRAY},  // 剩余筹码
			{137, utils.TYPE_STRING_UTF16}, // 头像
			{138, utils.TYPE_INT_1_ARRAY},
			{139, utils.TYPE_INT_1_ARRAY},
			{140, utils.TYPE_INT_4},
			{141, utils.TYPE_INT_4},
			{142, utils.TYPE_INT_4},
			{143, utils.TYPE_INT_4},
			{144, utils.TYPE_INT_4},
			{145, utils.TYPE_STRING_UTF16},
			{146, utils.TYPE_INT_4},
			{147, utils.TYPE_INT_1},        // 是否开启带入控制 1开启 0不开启
			{148, utils.TYPE_INT_4},        // 用户筹码
			{149, utils.TYPE_INT_4},        // 用户房间筹码
			{150, utils.TYPE_INT_4},        // 牌局剩余时间
			{151, utils.TYPE_INT_4},        // 房间暂停剩余时间 0 非暂停状态
			{152, utils.TYPE_INT_4},        // 上次修改未生效记录
			{153, utils.TYPE_INT_4},        // 上次修改未生效记录
			{154, utils.TYPE_INT_4},        // 当前最小带入倍数
			{155, utils.TYPE_INT_4},        // 当前最大带入倍数
			{156, utils.TYPE_INT_4},        // 当前操作玩家剩余操作时间（秒）
			{157, utils.TYPE_INT_1_ARRAY},  // 桌面玩家性别
			{158, utils.TYPE_INT_4},        // 0 不亮 1亮第一张 2亮第二张 3亮两张
			{159, utils.TYPE_INT_4},        // 前注
			{160, utils.TYPE_INT_4},        // 上次控制带入请求剩余等待时间
			{161, utils.TYPE_INT_4_ARRAY},  // 主池边池数据
			{162, utils.TYPE_INT_4},        // 最小加注金额
			{163, utils.TYPE_INT_4},        // 是否能加注
			{164, utils.TYPE_INT_4},        // 保险模式
			{165, utils.TYPE_INT_4_ARRAY},  // 是否能打牌
			{166, utils.TYPE_INT_4_ARRAY},  // 0:none 1:toast >0 气泡
			{167, utils.TYPE_INT_4},        // 0过庄 1补盲 2正常
			{168, utils.TYPE_INT_4},        // 用户信用额度，MAX_VALUE表示无限制
			{169, utils.TYPE_INT_4},        // 房间类型 (1:普通房 2:社区有限时长局 3:社区无限时长局)
			{170, utils.TYPE_INT_4},        // 需要带入的筹码数 (只有roomType=2时有效,值0表示第一次进入房间)
			{171, utils.TYPE_INT_4},        // 是否有被托管
			{172, utils.TYPE_INT_4},        // 轮到本人操作需要跟注筹码
			{173, utils.TYPE_INT_1_ARRAY},  // 底牌类型 (0:正常发牌 1:玩家花钻石发牌)
			{174, utils.TYPE_INT_4},        // 是否在其他房间有离桌留座
			{175, utils.TYPE_INT_4_ARRAY},  // 剩余留座时间 单位秒
			{176, utils.TYPE_STRING_UTF16}, // 花钻石看底牌的玩家名字
			{177, utils.TYPE_INT_4},        // ip控制 0否 1是
			{178, utils.TYPE_INT_4},        // gps控制
			{179, utils.TYPE_INT_4},        // 房间的联盟id
			{180, utils.TYPE_INT_4_ARRAY},  // 占座等待状态
			{181, utils.TYPE_INT_4},        // 该玩家是否有在本牌局中带入过，0否1是
			{182, utils.TYPE_INT_4},        // 是否已经提前离桌，0否1是，前端结合181字段判断是否要在菜单栏中显示“提前离桌”按钮
			{183, utils.TYPE_INT_1},        // 玩家语音功能是否开启
			{184, utils.TYPE_STRING_UTF16}, // 当前客户端对应最新版本号
			{185, utils.TYPE_INT_1},        // 提前离桌
			{186, utils.TYPE_INT_4},        // 当前房间操作累计次数
			{187, utils.TYPE_INT_1},        // 是否定向房间
			{188, utils.TYPE_INT_4},        // 服务费百分比
			{189, utils.TYPE_INT_1},        // 是否开启信用控制
			{190, utils.TYPE_INT_4},        // 思考时间
			{191, utils.TYPE_INT_4},        // 用户延时操作次数
			{198, utils.TYPE_INT_4},
		}

		var message_new = make([]byte, 1024*1024)
		n, _ := conn.Read(message_new)
		if n == 0 {
			continue
		}

		// fmt.Printf("% x", message_new)

		var buffer bytes.Buffer

		// 将 conn 中的数据复制到 buffer 中
		// 你可以使用 io.Copy 或手动读取到 buffer
		n, err := buffer.Write(message_new)
		if err != nil {
			fmt.Println(err.Error())
		}
		fmt.Println("读取到字节:", n)
		mData := utils.PickAll(message_new, objs)
		fmt.Println("mData", mData)
	}

}

func TestEnterRoomAndAutoOp(t *testing.T) {
	// conn, err := net.Dial("tcp", "16.162.29.171:8040")
	conn, err := net.Dial("tcp", "127.0.0.1:8040")
	if err != nil {
		fmt.Println(err)
	}

	data := []byte{
		0x44, 0x5A, 0x50, 0x4B, 0x01, 0x00, 0x0F, 0x45, 0xCF, 0x01, 0x02, 0xFE, 0x00, 0x0E, 0x03, 0xEA,
		0x00, 0x0C, 0x00, 0x76, 0x00, 0x33, 0x00, 0x65, 0x00, 0x64, 0x00, 0x34, 0x00, 0x31, 0x00, 0x63,
		0x00, 0x66, 0x00, 0x64, 0x00, 0x63, 0x00, 0x36, 0x00, 0x35, 0x00, 0x33, 0x00, 0x34, 0x00, 0x38,
		0x00, 0x65, 0x00, 0x30, 0x00, 0x39, 0x00, 0x30, 0x00, 0x61, 0x00, 0x38, 0x00, 0x30, 0x00, 0x39,
		0x00, 0x39, 0x00, 0x63, 0x00, 0x38, 0x00, 0x33, 0x00, 0x32, 0x00, 0x61, 0x00, 0x33, 0x00, 0x62,
		0x00, 0x31, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x3C, 0x01, 0x3D, 0x01, 0x3E,
		0x01, 0x83, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3D, 0x84, 0x00, 0x04, 0x00, 0x0E, 0xAA, 0xCF, 0x85,
		0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
	}

	i, err := conn.Write(data)
	if err != nil {
		fmt.Println(err.Error())
	}
	fmt.Println("i", i)
	fmt.Println(conn.RemoteAddr().String())
	for {
		var message_new = make([]byte, 1024*1024)
		n, _ := conn.Read(message_new)
		if n == 0 {
			continue
		}

		fmt.Printf("发送auto op请求")

		opcode18 := []byte{
			0x44, 0x5A, 0x50, 0x4B, 0x01, 0x00, 0x0F, 0x45, 0xCF, 0x01, 0x02, 0xFE, 0x00, 0x0E, 0x03, 0xEA,
			0x00, 0x44, 0x00, 0x6D, 0x00, 0x33, 0x00, 0x65, 0x00, 0x64, 0x00, 0x34, 0x00, 0x31, 0x00, 0x63,
			0x00, 0x66, 0x00, 0x64, 0x00, 0x63, 0x00, 0x36, 0x00, 0x35, 0x00, 0x33, 0x00, 0x34, 0x00, 0x38,
			0x00, 0x65, 0x00, 0x30, 0x00, 0x39, 0x00, 0x30, 0x00, 0x61, 0x00, 0x38, 0x00, 0x30, 0x00, 0x39,
			0x00, 0x39, 0x00, 0x63, 0x00, 0x38, 0x00, 0x33, 0x00, 0x32, 0x00, 0x61, 0x00, 0x33, 0x00, 0x62,
			0x00, 0x31, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x82, 0x00, 0x04, 0x00, 0x0E,
			0xAA, 0xCF, 0x83, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3D, 0x84, 0x02, 0x85, 0x00,
		}
		conn.Write(opcode18)

		// var message_new = make([]byte, 1024*1024)
		for {
			n, _ = conn.Read(message_new)
			if n == 0 {
				continue
			}
			break
		}
		break
	}
}

func TestEnterRoomAndStartRoom(t *testing.T) {
	// conn, err := net.Dial("tcp", "16.162.29.171:8040")
	conn, err := net.Dial("tcp", "127.0.0.1:8040")
	if err != nil {
		fmt.Println(err)
	}

	data := []byte{
		0x44, 0x5A, 0x50, 0x4B, 0x01, 0x00, 0x0F, 0x45, 0xE9, 0x01, 0x02, 0xFE, 0x00, 0x0E, 0x03, 0xEA,
		0x00, 0x0C, 0x00, 0x76, 0x00, 0x61, 0x00, 0x31, 0x00, 0x32, 0x00, 0x39, 0x00, 0x30, 0x00, 0x37,
		0x00, 0x65, 0x00, 0x63, 0x00, 0x30, 0x00, 0x35, 0x00, 0x33, 0x00, 0x64, 0x00, 0x34, 0x00, 0x64,
		0x00, 0x33, 0x00, 0x66, 0x00, 0x38, 0x00, 0x37, 0x00, 0x66, 0x00, 0x36, 0x00, 0x65, 0x00, 0x39,
		0x00, 0x30, 0x00, 0x35, 0x00, 0x39, 0x00, 0x33, 0x00, 0x38, 0x00, 0x38, 0x00, 0x30, 0x00, 0x66,
		0x00, 0x65, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x3C, 0x01, 0x3D, 0x01, 0x3E,
		0x01, 0x83, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3D, 0x84, 0x00, 0x04, 0x00, 0x0B, 0x1A, 0xF1, 0x85,
		0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
	}

	i, err := conn.Write(data)
	if err != nil {
		fmt.Println(err.Error())
	}
	fmt.Println("i", i)
	fmt.Println(conn.RemoteAddr().String())
	for {
		var message_new = make([]byte, 1024*1024)
		n, _ := conn.Read(message_new)
		if n == 0 {
			continue
		}

		fmt.Printf("发送startRoom请求")

		opcode18 := []byte{
			0x44, 0x5A, 0x50, 0x4B, 0x01, 0x00, 0x0F, 0x45, 0xE9, 0x01, 0x02, 0xFE, 0x00, 0x0E, 0x03, 0xEA, 0x00,
			0x20, 0x00, 0x69, 0x00, 0x61, 0x00, 0x31, 0x00, 0x32, 0x00, 0x39, 0x00, 0x30, 0x00, 0x37, 0x00,
			0x65, 0x00, 0x63, 0x00, 0x30, 0x00, 0x35, 0x00, 0x33, 0x00, 0x64, 0x00, 0x34, 0x00, 0x64, 0x00,
			0x33, 0x00, 0x66, 0x00, 0x38, 0x00, 0x37, 0x00, 0x66, 0x00, 0x36, 0x00, 0x65, 0x00, 0x39, 0x00,
			0x30, 0x00, 0x35, 0x00, 0x39, 0x00, 0x33, 0x00, 0x38, 0x00, 0x38, 0x00, 0x30, 0x00, 0x66, 0x00,
			0x65, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x00, 0x04, 0x00, 0x00, 0x00,
			0x3D, 0x83, 0x00, 0x04, 0x00, 0x0B, 0x1A, 0xF1,
		}
		conn.Write(opcode18)

		// var message_new = make([]byte, 1024*1024)
		for {
			n, _ = conn.Read(message_new)
			if n == 0 {
				continue
			}
			break
		}
		break
	}
}

func TestStartRoom(t *testing.T) {
	conn, err := net.Dial("tcp", "127.0.0.1:8040")
	if err != nil {
		fmt.Println(err)
	}

	sendAndReceive(conn, []DataEntry{
		{
			Data: []byte{
				0x44, 0x5A, 0x50, 0x4B, 0x01, 0x00, 0x0F, 0x45, 0xF0, 0x01, 0x02, 0xFE, 0x00, 0x0E, 0x03, 0xEA,
				0x00, 0x0C, 0x00, 0x76, 0x00, 0x65, 0x00, 0x64, 0x00, 0x36, 0x00, 0x37, 0x00, 0x37, 0x00, 0x61,
				0x00, 0x34, 0x00, 0x30, 0x00, 0x38, 0x00, 0x62, 0x00, 0x34, 0x00, 0x32, 0x00, 0x34, 0x00, 0x37,
				0x00, 0x38, 0x00, 0x34, 0x00, 0x38, 0x00, 0x66, 0x00, 0x62, 0x00, 0x30, 0x00, 0x38, 0x00, 0x65,
				0x00, 0x30, 0x00, 0x62, 0x00, 0x63, 0x00, 0x31, 0x00, 0x32, 0x00, 0x61, 0x00, 0x36, 0x00, 0x63,
				0x00, 0x32, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x3C, 0x01, 0x3D, 0x01, 0x3E,
				0x01, 0x83, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3D, 0x84, 0x00, 0x04, 0x00, 0x03, 0xC1, 0x8A, 0x85,
				0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
			},
			Message:   "发送进入房间请求",
			SleepTime: 1,
		},
		{
			Data: []byte{
				0x44, 0x5A, 0x50, 0x4B, 0x01, 0x00, 0x0F, 0x45, 0xF0, 0x01, 0x02, 0xFE, 0x00, 0x0E, 0x03, 0xEA,
				0x00, 0x12, 0x00, 0xAC, 0x00, 0x65, 0x00, 0x64, 0x00, 0x36, 0x00, 0x37, 0x00, 0x37, 0x00, 0x61,
				0x00, 0x34, 0x00, 0x30, 0x00, 0x38, 0x00, 0x62, 0x00, 0x34, 0x00, 0x32, 0x00, 0x34, 0x00, 0x37,
				0x00, 0x38, 0x00, 0x34, 0x00, 0x38, 0x00, 0x66, 0x00, 0x62, 0x00, 0x30, 0x00, 0x38, 0x00, 0x65,
				0x00, 0x30, 0x00, 0x62, 0x00, 0x63, 0x00, 0x31, 0x00, 0x32, 0x00, 0x61, 0x00, 0x36, 0x00, 0x63,
				0x00, 0x32, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3C, 0x01, 0x3D, 0x01, 0x3E,
				0x00, 0x1A, 0x00, 0x32, 0x00, 0x33, 0x00, 0x2E, 0x00, 0x31, 0x00, 0x30, 0x00, 0x32, 0x00, 0x30,
				0x00, 0x38, 0x00, 0x35, 0x00, 0x36, 0x00, 0x38, 0x00, 0x35, 0x00, 0x36, 0x3F, 0x00, 0x1C, 0x00,
				0x31, 0x00, 0x31, 0x00, 0x33, 0x00, 0x2E, 0x00, 0x33, 0x00, 0x38, 0x00, 0x34, 0x00, 0x35, 0x00,
				0x32, 0x00, 0x38, 0x00, 0x31, 0x00, 0x36, 0x00, 0x30, 0x00, 0x31, 0x40, 0x00, 0x00, 0x82, 0x00,
				0x04, 0x00, 0x00, 0x00, 0x3D, 0x83, 0x00, 0x04, 0x00, 0x03, 0xC1, 0x8A,
			},
			Message:   "第一个人进入房间",
			SleepTime: 1,
		},
		{
			Data: []byte{
				0x44, 0x5A, 0x50, 0x4B, 0x01, 0x00, 0x0F, 0x45, 0xF0, 0x01, 0x02, 0xFE, 0x00, 0x0E, 0x03, 0xEA,
				0x00, 0x12, 0x00, 0xAC, 0x00, 0x65, 0x00, 0x64, 0x00, 0x36, 0x00, 0x37, 0x00, 0x37, 0x00, 0x61,
				0x00, 0x34, 0x00, 0x30, 0x00, 0x38, 0x00, 0x62, 0x00, 0x34, 0x00, 0x32, 0x00, 0x34, 0x00, 0x37,
				0x00, 0x38, 0x00, 0x34, 0x00, 0x38, 0x00, 0x66, 0x00, 0x62, 0x00, 0x30, 0x00, 0x38, 0x00, 0x65,
				0x00, 0x30, 0x00, 0x62, 0x00, 0x63, 0x00, 0x31, 0x00, 0x32, 0x00, 0x61, 0x00, 0x36, 0x00, 0x63,
				0x00, 0x32, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3C, 0x01, 0x3D, 0x01, 0x3E,
				0x00, 0x1A, 0x00, 0x32, 0x00, 0x33, 0x00, 0x2E, 0x00, 0x31, 0x00, 0x30, 0x00, 0x32, 0x00, 0x30,
				0x00, 0x38, 0x00, 0x35, 0x00, 0x36, 0x00, 0x38, 0x00, 0x35, 0x00, 0x36, 0x3F, 0x00, 0x1C, 0x00,
				0x31, 0x00, 0x31, 0x00, 0x33, 0x00, 0x2E, 0x00, 0x33, 0x00, 0x38, 0x00, 0x34, 0x00, 0x35, 0x00,
				0x32, 0x00, 0x38, 0x00, 0x31, 0x00, 0x36, 0x00, 0x30, 0x00, 0x31, 0x40, 0x00, 0x00, 0x82, 0x00,
				0x04, 0x00, 0x00, 0x00, 0x3D, 0x83, 0x00, 0x04, 0x00, 0x03, 0xC1, 0x8A,
			},
			Message:   "第一个人坐下",
			SleepTime: 1,
		},
		{
			Data: []byte{
				0x44, 0x5A, 0x50, 0x4B, 0x01, 0x00, 0x0F, 0x45, 0xF1, 0x01, 0x01, 0xFE, 0x00, 0x0E, 0x03, 0xEA,
				0x00, 0x0C, 0x00, 0x76, 0x00, 0x63, 0x00, 0x63, 0x00, 0x62, 0x00, 0x31, 0x00, 0x32, 0x00, 0x64,
				0x00, 0x66, 0x00, 0x35, 0x00, 0x63, 0x00, 0x66, 0x00, 0x30, 0x00, 0x37, 0x00, 0x34, 0x00, 0x38,
				0x00, 0x32, 0x00, 0x36, 0x00, 0x61, 0x00, 0x31, 0x00, 0x37, 0x00, 0x34, 0x00, 0x65, 0x00, 0x31,
				0x00, 0x63, 0x00, 0x64, 0x00, 0x62, 0x00, 0x63, 0x00, 0x33, 0x00, 0x38, 0x00, 0x34, 0x00, 0x61,
				0x00, 0x36, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x3C, 0x01, 0x3D, 0x01, 0x3E,
				0x01, 0x83, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3D, 0x84, 0x00, 0x04, 0x00, 0x03, 0xC1, 0x8A, 0x85,
				0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
			},
			Message:   "第二个人进房",
			SleepTime: 1,
		},
		{
			Data: []byte{
				0x44, 0x5A, 0x50, 0x4B, 0x01, 0x00, 0x0F, 0x45, 0xF1, 0x01, 0x01, 0xFE, 0x00, 0x0E, 0x03, 0xEA,
				0x00, 0x12, 0x00, 0x94, 0x00, 0x63, 0x00, 0x63, 0x00, 0x62, 0x00, 0x31, 0x00, 0x32, 0x00, 0x64,
				0x00, 0x66, 0x00, 0x35, 0x00, 0x63, 0x00, 0x66, 0x00, 0x30, 0x00, 0x37, 0x00, 0x34, 0x00, 0x38,
				0x00, 0x32, 0x00, 0x36, 0x00, 0x61, 0x00, 0x31, 0x00, 0x37, 0x00, 0x34, 0x00, 0x65, 0x00, 0x31,
				0x00, 0x63, 0x00, 0x64, 0x00, 0x62, 0x00, 0x63, 0x00, 0x33, 0x00, 0x38, 0x00, 0x34, 0x00, 0x61,
				0x00, 0x36, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3C, 0x01, 0x3D, 0x00, 0x3E,
				0x00, 0x02, 0x00, 0x30, 0x3F, 0x00, 0x02, 0x00, 0x30, 0x40, 0x00, 0x1A, 0x00, 0x31, 0x00, 0x35,
				0x00, 0x34, 0x00, 0x2E, 0x00, 0x38, 0x00, 0x39, 0x00, 0x2E, 0x00, 0x31, 0x00, 0x34, 0x00, 0x2E,
				0x00, 0x32, 0x00, 0x34, 0x00, 0x32, 0x82, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3D, 0x83, 0x00, 0x04,
				0x00, 0x03, 0xC1, 0x8A,
			},
			Message:   "第二个人坐下",
			SleepTime: 1,
		},
		{
			Data: []byte{
				0x44, 0x5A, 0x50, 0x4B, 0x01, 0x00, 0x0F, 0x45, 0xF1, 0x01, 0x01, 0xFE, 0x00, 0x0E, 0x03, 0xEA,
				0x00, 0x1C, 0x01, 0x00, 0x00, 0x63, 0x00, 0x63, 0x00, 0x62, 0x00, 0x31, 0x00, 0x32, 0x00, 0x64,
				0x00, 0x66, 0x00, 0x35, 0x00, 0x63, 0x00, 0x66, 0x00, 0x30, 0x00, 0x37, 0x00, 0x34, 0x00, 0x38,
				0x00, 0x32, 0x00, 0x36, 0x00, 0x61, 0x00, 0x31, 0x00, 0x37, 0x00, 0x34, 0x00, 0x65, 0x00, 0x31,
				0x00, 0x63, 0x00, 0x64, 0x00, 0x62, 0x00, 0x63, 0x00, 0x33, 0x00, 0x38, 0x00, 0x34, 0x00, 0x61,
				0x00, 0x36, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x3C, 0x00, 0x3D, 0x01, 0x3E,
				0x00, 0x02, 0x00, 0x30, 0x3F, 0x00, 0x02, 0x00, 0x30, 0x40, 0x00, 0x1A, 0x00, 0x31, 0x00, 0x35,
				0x00, 0x34, 0x00, 0x2E, 0x00, 0x38, 0x00, 0x39, 0x00, 0x2E, 0x00, 0x31, 0x00, 0x34, 0x00, 0x2E,
				0x00, 0x32, 0x00, 0x34, 0x00, 0x32, 0x82, 0x00, 0x04, 0x00, 0x00, 0x06, 0x40, 0x83, 0x00, 0x04,
				0x00, 0x00, 0x00, 0x3D, 0x84, 0x00, 0x04, 0x00, 0x03, 0xC1, 0x8A, 0x85, 0x00, 0x04, 0x00, 0x00,
				0x00, 0x00, 0x86, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x87, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00,
				0x88, 0x00, 0x40, 0x00, 0x38, 0x00, 0x38, 0x00, 0x62, 0x00, 0x64, 0x00, 0x35, 0x00, 0x38, 0x00,
				0x31, 0x00, 0x36, 0x00, 0x64, 0x00, 0x31, 0x00, 0x30, 0x00, 0x64, 0x00, 0x35, 0x00, 0x63, 0x00,
				0x32, 0x00, 0x35, 0x00, 0x64, 0x00, 0x39, 0x00, 0x65, 0x00, 0x62, 0x00, 0x64, 0x00, 0x61, 0x00,
				0x39, 0x00, 0x64, 0x00, 0x66, 0x00, 0x34, 0x00, 0x31, 0x00, 0x32, 0x00, 0x34, 0x00, 0x33, 0x00,
				0x66, 0x00, 0x63, 0x89, 0x00, 0x00, 0x8A, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x00, 0x00,
			},
			Message:   "第二个人添加筹码",
			SleepTime: 1,
		},
		{
			Data: []byte{
				0x44, 0x5A, 0x50, 0x4B, 0x01, 0x00, 0x0F, 0x45, 0xF0, 0x01, 0x02, 0xFE, 0x00, 0x0E, 0x03, 0xEA,
				0x00, 0x20, 0x00, 0x69, 0x00, 0x65, 0x00, 0x64, 0x00, 0x36, 0x00, 0x37, 0x00, 0x37, 0x00, 0x61,
				0x00, 0x34, 0x00, 0x30, 0x00, 0x38, 0x00, 0x62, 0x00, 0x34, 0x00, 0x32, 0x00, 0x34, 0x00, 0x37,
				0x00, 0x38, 0x00, 0x34, 0x00, 0x38, 0x00, 0x66, 0x00, 0x62, 0x00, 0x30, 0x00, 0x38, 0x00, 0x65,
				0x00, 0x30, 0x00, 0x62, 0x00, 0x63, 0x00, 0x31, 0x00, 0x32, 0x00, 0x61, 0x00, 0x36, 0x00, 0x63,
				0x00, 0x32, 0x00, 0x61, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x82, 0x00, 0x04, 0x00, 0x00,
				0x00, 0x3D, 0x83, 0x00, 0x04, 0x00, 0x03, 0xC1, 0x8A,
			},
			Message:   "发送开始房间请求",
			SleepTime: 2,
		},
	})
}

func TestStartRoomAndStopRoom(t *testing.T) {
	conn, err := net.Dial("tcp", "127.0.0.1:8040")
	if err != nil {
		fmt.Println(err)
	}

	sendAndReceive2(conn, []DataEntry{
		{
			Data:    parseStringToHex("44 5A 50 4B 01 00 0F 46 4D 01 02 FE 00 0E 03 EA 00 0C 00 76 00 39 00 61 00 39 00 32 00 31 00 34 00 65 00 35 00 39 00 31 00 61 00 36 00 34 00 62 00 64 00 32 00 61 00 33 00 33 00 33 00 31 00 35 00 32 00 63 00 31 00 33 00 36 00 34 00 61 00 61 00 36 00 66 00 00 00 00 00 00 06 3C 01 3D 01 3E 01 83 00 04 00 00 00 3F 84 00 04 00 0C D3 7A 85 00 04 00 00 00 00"),
			Message: "进入房间",
		},
		{
			Data:    parseStringToHex("44 5A 50 4B 01 00 0F 46 4D 01 02 FE 00 0E 03 EA 00 12 00 AC 00 39 00 61 00 39 00 32 00 31 00 34 00 65 00 35 00 39 00 31 00 61 00 36 00 34 00 62 00 64 00 32 00 61 00 33 00 33 00 33 00 31 00 35 00 32 00 63 00 31 00 33 00 36 00 34 00 61 00 61 00 36 00 66 00 00 00 00 00 00 07 3C 01 3D 00 3E 00 1A 00 32 00 33 00 2E 00 31 00 30 00 32 00 30 00 38 00 35 00 36 00 38 00 35 00 36 3F 00 1C 00 31 00 31 00 33 00 2E 00 33 00 38 00 34 00 35 00 32 00 38 00 31 00 36 00 30 00 31 40 00 00 82 00 04 00 00 00 3F 83 00 04 00 0C D3 7A"),
			Message: "坐下",
		},
		{
			Data:    parseStringToHex("44 5A 50 4B 01 00 0F 46 4D 01 02 FE 00 0E 03 EA 00 45 00 69 00 39 00 61 00 39 00 32 00 31 00 34 00 65 00 35 00 39 00 31 00 61 00 36 00 34 00 62 00 64 00 32 00 61 00 33 00 33 00 33 00 31 00 35 00 32 00 63 00 31 00 33 00 36 00 34 00 61 00 61 00 36 00 66 00 00 00 00 00 00 02 82 00 04 00 0C D3 7A 83 00 04 00 00 00 3F"),
			Message: "解散房间",
		},
	})
}
